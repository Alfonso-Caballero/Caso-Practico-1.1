pipeline {
    agent any
    options {
        skipDefaultCheckout() // Default repository cloning fails, causing pipeline failure
    }
    stages {
        stage('Get Code') {
            steps {
                git 'https://github.com/Alfonso-Caballero/Caso-Practico-1.1.git'
                bat 'whoami'
                bat 'hostname'
                echo "${WORKSPACE}"
                stash name: 'code', includes : '**'
            }
        }
        stage('Parallel Tests and Analysis') {
            parallel{
              stage('Unit'){
                agent{label 'agent1'}
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE'){
                            sh 'whoami'
                            sh 'hostname'
                            echo "${WORKSPACE}"
                            unstash 'code'

                            sh 'export PYTHONPATH=$WORKSPACE'

                            // Run the tests with coverage
                            sh 'python3 -m coverage run --branch --source=app --omit=app/__init__.py,app/api.py -m pytest --junitxml=result-unit.xml test/unit'
        
                            // Generate the coverage XML report
                            sh 'python3 -m coverage xml -o test-reports/coverage-unit.xml'
        
                            // Process the JUnit XML result
                            junit 'result-unit.xml'
        
                            // Stash the coverage report
                            stash name: 'coverage', includes: 'test-reports/coverage-unit.xml'
                        }
                    }
                }
               stage('Static'){
                agent{label 'agent1'}
                    steps{
                        catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE'){
                            sh '''
                                python3 -m flake8 --exit-zero --format=pylint app >flake8.out
                                '''
                            recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
                                }
                            }
                        }
                stage('Rest') {
                    agent {label 'agent2'}
                        steps {
                            catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                                dir ("${WORKSPACE}/Caso-Practico-1.1") {
                                    unstash 'code'

                                    sh "java -jar test/wiremock/wiremock-standalone-3.5.4.jar --port 9090 --root-dir test/wiremock &"
                                        sh '''
                                            until nc -z localhost 9090; do
                                            echo "Waiting for WireMock server to start..."
                                            sleep 1
                                            done
                                            '''
                                         sh '''
                                            export FLASK_APP=$WORKSPACE/Caso-Practico-1.1/app/api.py
                                            flask run --port=5000 &
                                            '''
                                         sh '''
                                            until nc -z localhost 5000; do
                                            echo "Waiting for Flask server to start..."
                                            sleep 1
                                            done
                                            '''
                                         sh '''
                                            export PYTHONPATH=$WORKSPACE
                                            pytest --junitxml=result-test.xml test/rest
                                            '''
                                         sh 'whoami'
                                         sh 'hostname'
                                         echo "${WORKSPACE}"
                                                }
                                            }
                                        }
                                    }
                stage('Security'){
                    agent{label 'agent2'}                     
                        steps{
                            catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE'){
                                sh'''
                                    bandit -r . -f custom -o bandit.out --level -ll --msg-template "{abspath}:{line}: [{test_id}] {msg}" || true
                                    '''
                                recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
                                }
                            }
                        }
                    }
                }
            }
        post {
                always {
                    deleteDir()

            }
        }
    }
